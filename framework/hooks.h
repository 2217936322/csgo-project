#pragma once

using fnPresent = long(__stdcall*)(IDirect3DDevice9*, RECT*, RECT*, HWND, RGNDATA*);
using fnReset = long(__stdcall*)(IDirect3DDevice9*, D3DPRESENT_PARAMETERS*);
using fnPaintTraverse = void(__thiscall*)(void*, unsigned int, bool, bool);
using fnLockCursor = void(__thiscall*)(void*);
using fnCreateMove = bool(__thiscall*)(void*, float, c_usercmd*);
using fnDoPostScreenSpaceEffects = bool(__thiscall*)(void*, void*);
using fnDrawModelExecute = void(__thiscall*)(void*, void*, const c_drawmodelstate&, const c_modelrenderinfo&, c_matrix3x4*);
using fnFrameStageNotify = void(__stdcall*)(int);
using fnListLeavesInBox = int(__thiscall*)(void*, c_vector&, c_vector&, unsigned short*, int);
using fnOverrideView = int(__stdcall*)(c_viewsetup*);
using fnGetScreenAspectRatio = float(__thiscall*)(void*, int, int);
using fnDoExtraBonesProcessing = void(__thiscall*)(void*, c_studiohdr*, c_vector*, void*, c_matrix3x4*, void*, void*);
using fnEyeAngles = c_angle*(__thiscall*)(void*);
using fnUpdateClientsideAnimation = void(__thiscall*)(void*);
using fnStandartBlendingRules = void(__thiscall*)(void*, c_studiohdr*, c_vector*, void*, float, int);
using fnGetViewModelFOV = float(__thiscall*)(void*);
using fnPacketStart = void(__thiscall*)(void*, int, int);
using fnFireEvent = void(__thiscall*)(void*);
using fnPostDataUpdate = void(__thiscall*)(void*, int);
using fnSendNetMsg = bool(__thiscall*)(void*, c_netmessage*, bool&, bool);
using fnWriteUsercmdDeltaToBuffer = bool(__thiscall*)(void*, int, void*, int, int, bool);
using fnClGrenadePreview_get_bool = bool(__thiscall*)(void*, void*);
using fnIN_KeyEvent = int(__thiscall*)(void*, int, int, const char*);
using fnCL_SendMove = void(__stdcall*)();
using fnCL_Move = void(__stdcall*)(float, bool);
using fnSetChoked = void(__thiscall*)(void*);
using fnHlCreateMove = void(__thiscall*)(void*, int, float, bool);
using fnRunCommand = void(__thiscall*)(void*, c_player*, c_usercmd*, c_movehelper*);

extern fnPresent oPresent;
extern fnReset oReset;
extern WNDPROC oWndProc;
extern fnPaintTraverse oPaintTraverse;
extern fnLockCursor oLockCursor;
extern fnCreateMove oCreateMove;
extern fnDoPostScreenSpaceEffects oDoPostScreenSpaceEffects;
extern fnDrawModelExecute oDrawModelExecute;
extern fnFrameStageNotify oFrameStageNotify;
extern fnListLeavesInBox oListLeavesInBox;
extern fnOverrideView oOverrideView;
extern fnGetScreenAspectRatio oGetScreenAspectRatio;
extern fnDoExtraBonesProcessing oDoExtraBonesProcessing;
extern fnEyeAngles oEyeAngles;
extern fnUpdateClientsideAnimation oUpdateClientsideAnimation;
extern fnStandartBlendingRules oStandartBlendingRules;
extern fnGetViewModelFOV oGetViewModelFOV;
extern fnPacketStart oPacketStart;
extern fnFireEvent oFireEvent;
extern fnPostDataUpdate oPostDataUpdate;
extern fnSendNetMsg oSendNetMsg;
extern fnWriteUsercmdDeltaToBuffer oWriteUsercmdDeltaToBuffer;
extern fnIN_KeyEvent oIN_KeyEvent;
extern fnCL_SendMove oCL_SendMove;
extern fnSetChoked oSetChoked;
extern fnHlCreateMove oHlCreateMove;
extern fnRunCommand oRunCommand;
extern fnClGrenadePreview_get_bool oGrenadePreview_get_bool;

long __stdcall hkPresent(IDirect3DDevice9* device, RECT* a, RECT* b, HWND c, RGNDATA* d);
long __stdcall hkReset(IDirect3DDevice9* device, D3DPRESENT_PARAMETERS* a);
long __stdcall hkWndProc(HWND hwnd, UINT msg, WPARAM w, LPARAM l);
void __fastcall hkPaintTraverse(void* o, void*, unsigned int a, bool b, bool c);
void __stdcall hkLockCursor();
bool __stdcall hkCreateMove(float a, c_usercmd* cmd);
bool __stdcall hkDoPostScreenSpaceEffects(void* a);
void __fastcall hkDrawModelExecute(void* a, void*, void* b, const c_drawmodelstate& c, c_modelrenderinfo& render_info, c_matrix3x4* e);
void __stdcall hkFrameStageNotify(int stage);
int __fastcall hkListLeavesInBox(void* bsp, void*, c_vector& mins, c_vector& maxs, unsigned short* list, int size);
void __stdcall hkOverrideView(c_viewsetup* v);
float __fastcall hkGetScreenAspectRatio(void* e, void*, int w, int h);
void __fastcall hkDoExtraBonesProcessing(c_player* e, void*, c_studiohdr* a, c_vector* b, void* c, c_matrix3x4* d, void* f, void* g);
c_angle* __fastcall hkEyeAngles(c_player* e, void*);
void __fastcall hkUpdateClientsideAnimation(c_player* e, void*);
void __fastcall hkStandartBlendingRules(c_player* e, void*, c_studiohdr* a, c_vector* b, void* c, float d, int f);
float __fastcall hkGetViewModelFOV(void* o, void*);
void __fastcall hkPacketStart(void* o, void*, int inc, int out);
void __fastcall hkPostDataUpdate(c_player* p, void* edx, int updatetype);
void __fastcall hkFireEvent(void* o, void*);
bool __fastcall hkSendNetMsg(void* o, void*, c_netmessage* msg, bool& force_reliable, bool voice);
bool __fastcall hkWriteUsercmdDeltaToBuffer(void* o, void*, int, void* bf, int from, int to, bool is_new);
int __fastcall hkIN_KeyEvent(void* o, void*, int code, int key, const char* binding);
bool __fastcall hkShouldSkipAnimFrame(void*, void*);
bool __fastcall grenade_preview_get_bool(void*, void*);
void __stdcall hkSendMove();
void __fastcall hkSetChoked(c_netchannel* o, void*);
void __fastcall hkHlCreateMove(void* o, void*, int seq, float inp, bool active);
void __fastcall hkRunCommand(void* o, void*, c_player* p, c_usercmd* cmd, c_movehelper* h);
int __stdcall hkCamera(c_cvar* var, void* return_address, void* eax);