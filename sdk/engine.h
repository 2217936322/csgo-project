#pragma once

class c_engine {
public:
	virtual int                   get_intersecting_surfaces(const void*, const void*, const float, const bool, void*, const int) = 0;
	virtual void*                 get_light_for_point(const void*, bool) = 0;
	virtual void*				  trace_line_material_and_lighting(const void*, const void*, void*, void*) = 0;
	virtual const char*			  parse_file(const char*, char*, int) = 0;
	virtual bool                  copy_local_file(const char*, const char*) = 0;
	virtual void                  screen_size(int& width, int& height) = 0;
	virtual void                  server_cmd(const char* szCmdString, bool bReliable = true) = 0;
	virtual void                  client_cmd(const char* szCmdString) = 0;
	virtual bool                  get_player_info(int ent_num, void* pinfo) = 0;
	virtual int                   get_entnum(int userID) = 0;
	virtual void*				  get_text_message(const char*) = 0;
	virtual bool                  unused_0(void) = 0;
	virtual int                   get_local_player(void) = 0;
	virtual const void*			  load_model(const char*, bool bProp = false) = 0;
	virtual float                 get_timestamp(void) = 0;
	virtual void*		          get_sentence(void*) = 0;
	virtual float                 get_sentence_length(void*) = 0;
	virtual bool                  is_streaming(void*) const = 0;
	virtual void                  get_view_angles(c_angle* va) = 0;
	virtual void                  set_view_angles(c_angle* va) = 0;
	virtual int                   get_max_clients(void) = 0;
	virtual const char*			  lookup_binding(const char*) = 0;
	virtual const char*			  binding_for_key(int&) = 0;
	virtual void                  set_binding(int, char const*) = 0;
	virtual void                  start_key_trap_mode(void) = 0;
	virtual bool                  check_done_key_trapping(int&) = 0;
	virtual bool                  is_in_game(void) = 0;
	virtual bool                  is_connected(void) = 0;
	virtual bool                  is_drawing_loading_image(void) = 0;
	virtual void                  hide_loading_plaque(void) = 0;
	virtual void                  nprintf(int, const char*, ...) = 0;
	virtual void                  nxprintf(const struct con_nprint_s*, const char*, ...) = 0;
	virtual int                   is_box_visible(const void*, const void*) = 0;
	virtual int                   is_box_in_view_cluster(const void*, const void*) = 0;
	virtual bool                  cull_box(const void*, const void*) = 0;
	virtual void                  sound_extra_update(void) = 0;
	virtual const char*			  get_game_directory(void) = 0;
	virtual const c_matrix4x4&	  world_to_screen_matrix() = 0;
	virtual const c_matrix4x4&	  world_to_view_matrix() = 0;
	virtual int                   game_lump_version(int) const = 0;
	virtual int                   game_lump_size(int) const = 0;
	virtual bool                  load_game_lump(int, void*, int) = 0;
	virtual int                   level_leaf_count() const = 0;
	virtual void*				  get_bsp_tree_query() = 0;
	virtual void                  l2g(float*, float*) = 0;
	virtual float                 light_style_value(int) = 0;
	virtual void                  compute_dynamic_lighting(const void* pt, const void* pNormal, void* color) = 0;
	virtual void                  get_ambilight_color(void* color) = 0;
	virtual int                   get_dx_support_level() = 0;
	virtual bool                  supports_hdr() = 0;
	virtual void                  set_matsys(void* pMatSys) = 0;
	virtual void                  get_chapter_name(char* pchBuff, int iMaxLength) = 0;
	virtual char const*			  get_level_name(void) = 0;
	virtual char const*			  get_level_name_short(void) = 0;
	virtual char const*			  get_map_group_name(void) = 0;
	virtual void*				  get_voice_tweak_api(void) = 0;
	virtual void                  set_voice_caster(unsigned int someint) = 0;
	virtual void                  es_beginframe(void) = 0;
	virtual void                  es_endframe(void) = 0;
	virtual void                  fire_events() = 0;
	virtual int                   get_leaves_area(unsigned short* pLeaves, int nLeaves) = 0;
	virtual bool                  does_box_touch_leaves_area(const void* mins, const void* maxs, int iArea) = 0;
	virtual int                   get_frustum_list(void** pList, int listMax) = 0;
	virtual bool                  should_use_area_frustum(int i) = 0;
	virtual void                  set_audio_state(const void* state) = 0;
	virtual int                   s_grouppick(int groupIndex, char* name, int nameBufLen) = 0;
	virtual int                   s_grouppick_central(int groupIndex, char* name, int nameBufLen, int sentenceIndex, int reset) = 0;
	virtual int                   s_index_from_name(const char* pSentenceName) = 0;
	virtual const char*			  s_name_from_index(int sentenceIndex) = 0;
	virtual int                   s_groupindex_from_name(const char* pGroupName) = 0;
	virtual const char*			  s_groupname_from_index(int groupIndex) = 0;
	virtual float                 s_length(int sentenceIndex) = 0;
	virtual void                  compute_lighting(const void* pt, const void* pNormal, bool bClamp, void* color, void* pBoxColors = NULL) = 0;
	virtual void                  activate_occluder(int nOccluderIndex, bool bActive) = 0;
	virtual bool                  is_occluded(const void* vecAbsMins, const void* vecAbsMaxs) = 0; // 74
	virtual int                   get_occlusion_id(void) = 0;
	virtual void*				  save_alloc_memory(size_t num, size_t size) = 0;
	virtual void                  save_free_memory(void* pSaveMem) = 0;
	virtual void*				  get_net_channel(void) = 0;
	virtual void                  dbg_draw_phys_collide(const void* pCollide, void* pMaterial, const void* transform, const void* color) = 0;
	virtual void                  check_point(const char* pName) = 0;
	virtual void                  draw_portals() = 0;
	virtual bool                  is_playing_demo(void) = 0;
	virtual bool                  is_recording_demo(void) = 0;
	virtual bool                  is_playing_time_demo(void) = 0;
	virtual int                   get_demo_recording_tick(void) = 0;
	virtual int                   get_demo_playback_tick(void) = 0;
	virtual int                   get_demo_playback_start_tick(void) = 0;
	virtual float                 get_demo_playback_time_scale(void) = 0;
	virtual int                   get_demo_playback_total_ticks(void) = 0;
	virtual bool                  is_paused(void) = 0;
	virtual float                 get_timescale(void) const = 0;
	virtual bool                  is_taking_screenshot(void) = 0;
	virtual bool                  is_gotv(void) = 0;
	virtual bool                  is_level_mainmenu_bg(void) = 0;
	virtual void                  get_mainmenu_bg_name(char* dest, int destlen) = 0;
	virtual void                  set_occlusion_params(const int& params) = 0;
	virtual void                  get_ui_lang(char* dest, int destlen) = 0;
	virtual int                   is_skybox_visible_from_point(const void* vecPoint) = 0;
	virtual const char*			  get_map_entities_str() = 0;
	virtual bool                  is_in_edit_mode(void) = 0;
	virtual float                 get_screen_aspect_ratio(int viewportWidth, int viewportHeight) = 0;
	virtual bool                  unk0001(const char* password, bool isSecure) = 0;
	virtual bool                  unk0002(bool& finished) = 0;
	virtual unsigned int          get_engine_build_number() = 0;
	virtual const char*			  get_prod_version_string() = 0;
	virtual void                  grab_precolcor_frame(int x, int y, int width, int height) = 0;
	virtual bool                  is_hammer_running() const = 0;
	virtual void                  exec_client_cmd(const char* szCmdString) = 0;
	virtual bool                  map_has_hdr(void) = 0;
	virtual bool                  map_has_lightmap(void) = 0;
	virtual int                   get_app_id() = 0;
	virtual void*                 get_light_for_point_last(const void* pos, bool bClamp) = 0;
	virtual void                  unk0000(char  const*, int, bool) = 0;
	virtual void                  client_cmd_unrestricted(const char* szCmdString, const char* newFlag = 0) = 0;
	virtual void                  set_restrict_sc(bool bRestrict) = 0;
	virtual void                  set_restrict_cc(bool bRestrict) = 0;
	virtual void                  set_overlay_bind_proxy(int iOverlayID, void* pBindProxy) = 0;
	virtual bool                  copy_fb_to_mat(const char* pMaterialName) = 0;
	virtual void                  read_config(const int iController, const bool readDefault) = 0;
	virtual void                  set_ach_mgr(void* pAchievementMgr) = 0;
	virtual void*				  get_ach_mgr() = 0;
	virtual bool                  is_map_load_failed(void) = 0;
	virtual void                  set_map_load_failed(bool bState) = 0;
	virtual bool                  is_low_violence() = 0;
	virtual const char*			  get_most_recent_save(void) = 0;
	virtual void                  set_most_recent_save(const char* lpszFilename) = 0;
	virtual void                  xbox_exit() = 0;
	virtual bool                  is_save_in_progress() = 0;
	virtual bool                  is_as_in_progress(void) = 0;
	virtual unsigned int          on_device_attached(int iController) = 0;
	virtual void                  on_device_detached(int iController) = 0;
	virtual char* const           get_save_dir_name(void) = 0;
	virtual void                  write_screenshot(const char* pFilename) = 0;
	virtual void                  reset_demo_interpolation(void) = 0;
	virtual int                   get_active_ss_slot() = 0;
	virtual int                   set_active_ss_slot(int slot) = 0;
	virtual bool                  set_lp_resolvable(char const* pchContext, int nLine, bool bResolvable) = 0;
	virtual bool                  is_lp_resolvable() = 0;
	virtual int                   get_ss_player(int nSlot) = 0;
	virtual bool                  is_ss_active() = 0;
	virtual bool                  is_valid_ss_slot(int nSlot) = 0;
	virtual int                   first_valid_ss_slot() = 0;
	virtual int                   next_valid_ss_slot(int nPreviousSlot) = 0;
	virtual void*				  get_sp_memory_space(const char* szName, int ent_num = (1 << 11)) = 0;
	virtual void                  compute_lighting_cube(const void* pt, bool bClamp, void* pBoxColors) = 0;
	virtual void                  register_demo_callback(const char* szCallbackSaveID, void* pCallback) = 0;
	virtual void                  record_demo_custom_data(void* pCallback, const void* pData, size_t iDataLength) = 0;
	virtual void                  set_pitch_scale(float flPitchScale) = 0;
	virtual float                 get_pitch_scale(void) = 0;
	virtual bool                  load_sfm() = 0;
	virtual void                  unload_sfm() = 0;
	virtual void                  set_leaf_flag(int nLeafIndex, int nFlagBits) = 0;
	virtual void                  recalculate_bsp_leaf_flags(void) = 0;
	virtual bool                  dsp_0(void) = 0;
	virtual bool                  dsp_1(void) = 0;
	virtual bool                  dsp_2(void) = 0;
	virtual float                 dsp_3(void) = 0;
	virtual void                  set_mg_of_cur_mixer(const char* szgroupname, const char* szparam, float val, int setMixerType) = 0;
	virtual int                   get_ml_index(const char* szmixlayername) = 0;
	virtual void                  set_ml_level(int index, float level) = 0;
	virtual int                   get_ml_level(char  const* groupname) = 0;
	virtual void                  set_ml_trigger_factor(int i1, int i2, float fl) = 0;
	virtual void                  set_ml_trigger_factor(char  const* char1, char  const* char2, float fl) = 0;
	virtual bool                  is_creating_reslist() = 0;
	virtual bool                  is_creating_xbox_reslist() = 0;
	virtual void                  set_timescale(float flTimescale) = 0;
	virtual void                  set_gamestats_data(void* pGamestatsData) = 0;
	virtual void*				  get_gamestats_data() = 0;
	virtual void                  get_mouse_delta(int& dx, int& dy, bool b) = 0;
	virtual const char*			  key_lookup_binding(const char* pBinding, int iUserId = -1, int iStartCount = 0, int iAllowJoystick = -1) = 0;
	virtual int                   key_code_for_binding(char  const*, int, int, int) = 0;
	virtual void                  update_delights(void) = 0;
	virtual int                   get_bugsub_count() const = 0;
	virtual void                  clear_bugsub_count() = 0;
	virtual bool                  does_level_contain_water() const = 0;
	virtual float                 get_server_simframetime() const = 0;
	virtual void                  solid_moved(void* pSolidEnt, void* pSolidCollide, const void* pPrevAbsOrigin, bool accurateBboxTriggerChecks) = 0;
	virtual void                  trigged_moved(void* pTriggerEnt, bool accurateBboxTriggerChecks) = 0;
	virtual void                  compute_leafs_connected(const void* vecOrigin, int nCount, const int* pLeafIndices, bool* pIsConnected) = 0;
	virtual bool                  is_in_comment_mode(void) = 0;
	virtual void                  set_blur_fade(float amount) = 0;
	virtual bool                  is_trans_to_load() = 0;
	virtual void                  check_if_paths_changed() = 0;
	virtual void                  cfg_system_level(int nCPULevel, int nGPULevel) = 0;
	virtual void                  set_conn_password(char const* pchCurrentPW) = 0;
	virtual void*				  get_steam() = 0;
	virtual void                  submit_stat_record(char const* szMapName, unsigned int uiBlobVersion, unsigned int uiBlobSize, const void* pvBlob) = 0;
	virtual void                  server_cmd_kv(void* pKeyValues) = 0;
	virtual void                  sps(const void* model, const void* location, unsigned char chr, float fl1, float fl2) = 0;
	virtual bool                  has_paintmap(void) = 0;
	virtual void                  enable_paintmap_render() = 0;
	virtual void                  stps(const void* model, const void* position, const void* vec2, float radius, int& utilVecShit) = 0;
	virtual void                  remove_all_paint() = 0;
	virtual void                  paint_all_surfaces(unsigned char uchr) = 0;
	virtual void                  remove_paint(const void* model) = 0;
	virtual bool                  is_active_app() = 0;
	virtual bool                  is_local_client() = 0;
	virtual void                  tick_progress_bar() = 0;
	virtual void*				  get_input_context(int /*EngineInputContextId_t*/ id) = 0;
	virtual void                  get_startup_image(char* filename, int size) = 0;
	virtual bool                  is_using_loopback(void) = 0;
	virtual void                  save_game(const char*, bool, char*, int, char*, int) = 0;
	virtual void                  get_memory_stat( /* GenericMemoryStat_t */ void**) = 0;
	virtual bool                  did_game_shutdown(void) = 0;
	virtual int                   get_last_ack_cmd(void) = 0;
	virtual void                  finish_container_write(int i) = 0;
	virtual void                  finish_async_save(void) = 0;
	virtual int                   get_server_tick(void) = 0;
	virtual const char*			  get_mod_directory(void) = 0;
	virtual bool                  audio_language_changed(void) = 0;
	virtual bool                  is_auto_saving(void) = 0;
	virtual void                  start_loading_screen_sv(const char* command) = 0;
	virtual void                  start_loading_screen_kv(void* values) = 0;
	virtual void                  set_opvar_float(const char*, float) = 0;
	virtual void                  get_opvar_float(const char*, float&) = 0;
	virtual bool                  is_subscribed_map(const char*, bool) = 0;
	virtual bool                  is_featured_map(const char*, bool) = 0;
	virtual void                  get_demo_playback_parameters(void) = 0;
	virtual int                   get_client_version(void) = 0;
	virtual bool                  is_demp_skipping(void) = 0;
	virtual void                  set_demp_data(const void* values) = 0;
	virtual void                  clear_events(void) = 0;
	virtual int                   get_safe_zone_xmin(void) = 0;
	virtual bool                  is_voice_recoding(void) = 0;
	virtual void                  force_voice_record_on(void) = 0;
	virtual bool                  is_replay(void) = 0;

	float                         get_ping();
};
